--- lab1/kern/trap/trap.c	2019-04-01 21:30:49.703704563 +0800
+++ lab2/kern/trap/trap.c	2019-04-01 21:29:48.783705137 +0800
@@ -8,7 +8,7 @@
 #include <assert.h>
 #include <console.h>
 #include <kdebug.h>
-#include <string.h>
+
 #define TICK_NUM 100
 
 static void print_ticks() {
@@ -46,16 +46,6 @@
       *     You don't know the meaning of this instruction? just google it! and check the libs/x86.h to know more.
       *     Notice: the argument of lidt is idt_pd. try to find it!
       */
-
-	extern uintptr_t __vectors[];
-	int i;
-	for(i = 0; i < 256; i++)
-	{
-		SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
-	}
-
-	SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[i], DPL_USER);
-	lidt(&idt_pd);
 }
 
 static const char *
@@ -148,7 +138,6 @@
 static void
 trap_dispatch(struct trapframe *tf) {
     char c;
-	struct trapframe switchk2u, *switchu2k;
 
     switch (tf->tf_trapno) {
     case IRQ_OFFSET + IRQ_TIMER:
@@ -158,12 +147,6 @@
          * (2) Every TICK_NUM cycle, you can print some info using a funciton, such as print_ticks().
          * (3) Too Simple? Yes, I think so!
          */
-		ticks = ticks + 1;
-		if(ticks >= TICK_NUM)
-		{
-			ticks = 0;
-			print_ticks();
-		}
         break;
     case IRQ_OFFSET + IRQ_COM1:
         c = cons_getc();
@@ -175,28 +158,7 @@
         break;
     //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
     case T_SWITCH_TOU:
-        if(tf->tf_cs != USER_CS)
-        {
-            switchk2u = *tf;
-            switchk2u.tf_cs = USER_CS;
-            switchk2u.tf_ds = switchk2u.tf_es = switchk2u.tf_ss = USER_DS;
-            switchk2u.tf_esp = (uint32_t)tf + sizeof(struct trapframe) - 8;
-            
-            switchk2u.tf_eflags |= FL_IOPL_MASK;
-            
-            *((uint32_t*)tf-1) = (uint32_t)(&switchk2u);
-        }
-        break;
     case T_SWITCH_TOK:
-        if(tf->tf_cs != KERNEL_CS)
-        {
-            tf->tf_cs = KERNEL_CS;
-            tf->tf_ds = tf->tf_es = KERNEL_DS;
-            tf->tf_eflags &= ~FL_IOPL_MASK;
-            switchu2k = (struct trapframe*)(tf->tf_esp - (sizeof(struct trapframe)-8));
-            memmove(switchu2k, tf, sizeof(struct trapframe) - 8);
-            *((uint32_t*)tf-1) = (uint32_t)switchu2k;
-        }
         panic("T_SWITCH_** ??\n");
         break;
     case IRQ_OFFSET + IRQ_IDE1:
