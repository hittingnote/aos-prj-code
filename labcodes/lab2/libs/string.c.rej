--- lab1/libs/string.c	2019-04-01 21:29:48.779705137 +0800
+++ lab2/libs/string.c	2019-04-01 21:29:48.783705137 +0800
@@ -4,7 +4,7 @@
 /* *
  * strlen - calculate the length of the string @s, not including
  * the terminating '\0' character.
- * @s:        the input string
+ * @s:      the input string
  *
  * The strlen() function returns the length of string @s.
  * */
@@ -20,7 +20,7 @@
 /* *
  * strnlen - calculate the length of the string @s, not including
  * the terminating '\0' char acter, but at most @len.
- * @s:        the input string
+ * @s:      the input string
  * @len:    the max-length that function will scan
  *
  * Note that, this function looks only at the first @len characters
@@ -87,8 +87,8 @@
 
 /* *
  * strcmp - compares the string @s1 and @s2
- * @s1:        string to be compared
- * @s2:        string to be compared
+ * @s1:     string to be compared
+ * @s2:     string to be compared
  *
  * This function starts comparing the first character of each string. If
  * they are equal to each other, it continues with the following pairs until
@@ -114,9 +114,9 @@
 
 /* *
  * strncmp - compares up to @n characters of the string @s1 to those of the string @s2
- * @s1:        string to be compared
- * @s2:        string to be compared
- * @n:        maximum number of characters to compare
+ * @s1:     string to be compared
+ * @s2:     string to be compared
+ * @n:      maximum number of characters to compare
  *
  * This function starts comparing the first character of each string. If
  * they are equal to each other, it continues with the following pairs until
@@ -133,8 +133,8 @@
 
 /* *
  * strchr - locates first occurrence of character in string
- * @s:        the input string
- * @c:        character to be located
+ * @s:      the input string
+ * @c:      character to be located
  *
  * The strchr() function returns a pointer to the first occurrence of
  * character in @s. If the value is not found, the function returns 'NULL'.
@@ -152,8 +152,8 @@
 
 /* *
  * strfind - locates first occurrence of character in string
- * @s:        the input string
- * @c:        character to be located
+ * @s:      the input string
+ * @c:      character to be located
  *
  * The strfind() function is like strchr() except that if @c is
  * not found in @s, then it returns a pointer to the null byte at the
@@ -172,11 +172,11 @@
 
 /* *
  * strtol - converts string to long integer
- * @s:        the input string that contains the representation of an integer number
- * @endptr:    reference to an object of type char *, whose value is set by the
- *             function to the next character in @s after the numerical value. This
- *             parameter can also be a null pointer, in which case it is not used.
- * @base:    x
+ * @s:      the input string that contains the representation of an integer number
+ * @endptr: reference to an object of type char *, whose value is set by the
+ *          function to the next character in @s after the numerical value. This
+ *          parameter can also be a null pointer, in which case it is not used.
+ * @base:   x
  *
  * The function first discards as many whitespace characters as necessary until
  * the first non-whitespace character is found. Then, starting from this character,
@@ -261,9 +261,9 @@
 /* *
  * memset - sets the first @n bytes of the memory area pointed by @s
  * to the specified value @c.
- * @s:        pointer the the memory area to fill
- * @c:        value to set
- * @n:        number of bytes to be set to the value
+ * @s:      pointer the the memory area to fill
+ * @c:      value to set
+ * @n:      number of bytes to be set to the value
  *
  * The memset() function returns @s.
  * */
@@ -283,9 +283,9 @@
 /* *
  * memmove - copies the values of @n bytes from the location pointed by @src to
  * the memory area pointed by @dst. @src and @dst are allowed to overlap.
- * @dst        pointer to the destination array where the content is to be copied
- * @src        pointer to the source of data to by copied
- * @n:        number of bytes to copy
+ * @dst     pointer to the destination array where the content is to be copied
+ * @src     pointer to the source of data to by copied
+ * @n:      number of bytes to copy
  *
  * The memmove() function returns @dst.
  * */
@@ -313,9 +313,9 @@
 /* *
  * memcpy - copies the value of @n bytes from the location pointed by @src to
  * the memory area pointed by @dst.
- * @dst        pointer to the destination array where the content is to be copied
- * @src        pointer to the source of data to by copied
- * @n:        number of bytes to copy
+ * @dst     pointer to the destination array where the content is to be copied
+ * @src     pointer to the source of data to by copied
+ * @n:      number of bytes to copy
  *
  * The memcpy() returns @dst.
  *
@@ -340,9 +340,9 @@
 
 /* *
  * memcmp - compares two blocks of memory
- * @v1:        pointer to block of memory
- * @v2:        pointer to block of memory
- * @n:        number of bytes to compare
+ * @v1:     pointer to block of memory
+ * @v2:     pointer to block of memory
+ * @n:      number of bytes to compare
  *
  * The memcmp() functions returns an integral value indicating the
  * relationship between the content of the memory blocks:
